/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
scale 0.1;

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points(13);

        points[0]   = point(0,         0,         0.5);
        points[1]   = point(5,         0,         0.5);
        points[2]   = point(10,        0,         0.5);
        points[3]   = point(15,        0,         0.5);
        points[4]   = point(20,        0,         0.5);
        points[5]   = point(6.46,   3.53,         0.5);
        points[6]   = point(13.53,  3.53,         0.5);
        points[7]   = point(0,        10,         0.5);
        points[8]   = point(20,       10,         0.5);
        points[9]   = point(0,        60,         0.5);
        points[10]  = point(20,       60,         0.5);
        points[11]   = point(65,      60,         0.5);
        points[12]   = point(65,       0,         0.5);

        // Duplicate x points
        label sz = points.size();
        points.setSize(2*sz);
        for (label i = 0; i < sz; i++)
        {
            const point& pt = points[i];
            points[i+1*sz] = point( pt.x(), pt.y(), -pt.z());
        }

        label sz2 = points.size();
        points.setSize(2*sz2);
        for (label i = 0; i < sz2; i++)
        {
            const point& pt = points[i];
            points[i+1*sz2] = point(-pt.x(), pt.y(),  pt.z());
        }

        label sz3 = points.size();
        points.setSize(sz3+4);
        points[52]   = point( 65,     10,         0.5);
        points[53]   = point(-65,     10,         0.5);
        points[54]   = point( 65,     10,        -0.5);
        points[55]   = point(-65,     10,        -0.5);

        os  << points;
    #};
};

blocks
(
    hex ( 0  7  5  1 13 20 18 14) (10 10 1) simpleGrading (1 1 1) //0
    //hex ( 1  5  6  3 14 18 19 16) (10 10 1) simpleGrading (1 1 1) //1
    hex ( 3  6  8  4 16 19 21 17) (10 10 1) simpleGrading (1 1 1) //2
    hex ( 5  7  8  6 18 20 21 19) (10 10 1) simpleGrading (1 1 1) //3
    hex ( 7  9 10  8 20 22 23 21) (10 10 1) simpleGrading (1 1 1) //4
    //hex ( 4 10 11 12 17 23 24 25) (10 10 1) simpleGrading (1 1 1) //5
    hex ( 4 8 52 12 17 21 54 25) (10 10 1) simpleGrading (1 1 1) //5
    hex ( 0 27 31  7 13 40 44 20) (10 10 1) simpleGrading (1 1 1) //6
    //hex (29 32 31 27 42 45 44 40) (10 10 1) simpleGrading (1 1 1) //7
    hex (30 34 32 29 43 47 45 42) (10 10 1) simpleGrading (1 1 1) //8 
    hex (34  7 31 32 47 20 44 45) (10 10 1) simpleGrading (1 1 1) //9
    hex (34 36  9  7 47 49 22 20) (10 10 1) simpleGrading (1 1 1) //10
    //hex (38 37 36 30 51 50 49 43) (10 10 1) simpleGrading (1 1 1) //11
    hex (38 53 34 30 51 55 47 43) (10 10 1) simpleGrading (1 1 1) //11
    hex (8 10  11  52 21 23 24 54) (10 10 1) simpleGrading (1 1 1) //12
    hex (53 37 36 34 55 50 49 47) (10 10 1) simpleGrading (1 1 1) //13
);

edges1
(
    arc 5 6 (10 5 0.5)
    arc 18 19 (10 5 -0.5)
    arc 1 5 (5.381 1.91 0.5)
    arc 14 18 (5.381 1.91 -0.5)
    arc 3 6 (14.619 1.91 0.5)
    arc 16 19 (14.619 1.91 -0.5)
    // arc 4 9 (0.34202 0.939693 -0.5)
    // arc 19 24 (0.469846 0.17101 0.5)
    // arc 24 29 (0.17101 0.469846 0.5)
    // arc 20 23 (0.939693 0.34202 0.5)
    // arc 23 28 (0.34202 0.939693 0.5)
    // arc 11 16 (-0.469846 0.17101 -0.5)
    // arc 16 10 (-0.17101 0.469846 -0.5)
    // arc 12 15 (-0.939693 0.34202 -0.5)
    // arc 15 9 (-0.34202 0.939693 -0.5)
    // arc 30 35 (-0.469846 0.17101 0.5)
    // arc 35 29 (-0.17101 0.469846 0.5)
    // arc 31 34 (-0.939693 0.34202 0.5)
    // arc 34 28 (-0.34202 0.939693 0.5)
);

defaultPatch
{
    type empty;
}

boundary
(
    /*down
    {
        type patch;
        faces
        (
            ( 13  14 1 0)
            ( 14  16 3 1)
        );
    }
    right
    {
        type patch;
        faces
        (
            ( 2  3 22 21)
            ( 3  6 25 22)
        );
    }
    up
    {
        type symmetryPlane;
        faces
        (
            ( 7  8 27 26)
            ( 6  7 26 25)
            ( 8 18 37 27)
            (18 17 36 37)
        );
    }
    left
    {
        type patch;
        faces
        (
            (14 13 32 33)
            (17 14 33 36)
        );
    }
    cylinder
    {
        type symmetry;
        faces
        (
            (10  5 24 29)
            ( 5  0 19 24)
            (16 10 29 35)
            (11 16 35 30)
        );
    }*/
);

mergePatchPairs
(
);

// ************************************************************************* //
